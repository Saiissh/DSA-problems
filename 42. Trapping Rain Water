 /*
    brute force
        for each element fing its next greater and prev greater element using two loops
        if any of two is absent simply skip that element 
        and do water+=max(pge,nge)-curr height
        
        TC=O(N2)
    
    better approach
        using two extra arrays note left max element and right max element for  specfic element..       by  using loop
        and do water+=math.min(nge(i),pge(i)-1)

        TC=O(N)
        SC=O(N)


    most optimised approch
    Using pointers
    place left,right pointer and have lmax and right max
    if (arr[left]<lmax)water will be stored else do left++, lmax=arr[left]
    do same on right side also
    */

    // //better one
    // int n=arr.length;
    // int lmax[]=new int[n];
    // int rmax[]=new int[n];

    // int max=0;
    // for(int i=0;i<n;i++)
    // { //find left max for each element
    //     if(arr[i]>=max)
    //     max=arr[i];
    //     lmax[i]=max;
    // }
    // max=0;

    // for(int i=n-1;i>=0;i--)
    // {  //find right max for each element
    //     if(arr[i]>=max)
    //     max=arr[i];
    //     rmax[i]=max;
    // }

    // int water=0;
    // for(int i=0;i<n;i++)
    // water+=Math.min(lmax[i],rmax[i])-arr[i];

    // return water;


    //BEST APPROACH

    int n=arr.length;
    int left=1,right=n-2,lmax=arr[0],rmax=arr[n-1],water=0;

    while(left<=right)
    {
        if(lmax<rmax) //always water stored will be related to lowest val only
        {
            if(arr[left]>=lmax)
                lmax=arr[left];  //if curr > lmax..this will be my new boundary

            else
            {System.out.println(water);water+=lmax-arr[left];}
            //if this element  lmax se smaller hai..jab this will store water above it

            left++;
        }

        else
        {
            if(rmax<=arr[right])
            rmax=arr[right];

            else
                {System.out.println(arr[right]);water+=rmax-arr[right];}

            right--;
        }

    }
    return water;
