  /*
  find  mid..if mid>mid+1..chances of getting max on left side is high..thus do high=mid;
  
  else if i get mid<mid+1..chances of getting peak is high on right..thus low=mid+1
  */
  
  
  
  
  int n=arr.length;
        int low=0,high=n-1;int ans=-1;

		//edge case 1
		if(n<=1)
			return 0;
		
		while(low<high)   //this logic was hitt..as i assumed that arr is[1,2]/[2,1]
			{
				int mid=low+(high-low)/2;

				int midE=arr[mid];

				if(midE<arr[mid+1])  //if mid <mid+1..mtlb chances of getting peak on right is high
				{
					ans=mid+1;
                    low=mid+1;
				}

				else 
                {       //if mid>mid+1 means chances of getting high on left is high
					ans=mid;
					high=mid;
				}
			}
            return ans;

            /**
            
              while(s<=e)
       {
           int mid=(s+e)/2;

           if(mid+1<arr.length &&  arr[mid]<arr[mid+1])
           {
               ans=mid+1;
               s=mid+1;
           }
           else if( mid+1<arr.length &&  arr[mid]>arr[mid+1])
           {
               ans=mid;
               e=mid-1;
           }
           else 
           break;
       }
       return ans;
             */
